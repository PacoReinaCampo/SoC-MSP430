/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                 TWO-OPERAND ARITHMETIC: DADD[.B] INSTRUCTION              */
/*---------------------------------------------------------------------------*/
/* Test the DADD[.B] instruction.                                            */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev: 19 $                                                                */
/* $LastChangedBy: olivier.girard $                                          */
/* $LastChangedDate: 2009-08-04 23:47:15 +0200 (Tue, 04 Aug 2009) $          */
/*===========================================================================*/


.global main

main:
        /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */

	# Test DADD without Carry bit set
	mov     #0x0000, r2
	mov     #0x0159, r4
	mov     #0x1078, r5
	dadd         r4, r5        ;# Add decimally r5+r4 (159+1078=1237)

	# Test DADD with Carry bit set
	mov     #0x0001, r2
	mov     #0x4999, r4
	mov     #0x2111, r6
	dadd         r4, r6        ;# Add decimally r6+r4 (4999+2111+C=7111)


	mov     #0x1000, r15


        /* -------------- TEST INSTRUCTION IN BYTE MODE ------------------- */

	# Test DADD.B without Carry bit set
	mov     #0x0000, r2
	mov     #0x0159, r4
	mov     #0x1078, r5
	dadd.b       r4, r5        ;# Add decimally r5+r4 (59+78=37)

	# Test DADD.B with Carry bit set
	mov     #0x0001, r2
	mov     #0x3149, r4
	mov     #0x5621, r6
	dadd.b       r4, r6        ;# Add decimally r6+r4 (49+21+C=71)


	mov     #0x2000, r15


        /* ------------------ TEST FLAGS IN WORD MODE ---------------------- */

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=0
	mov     #0x7995, r4        ;#
	mov     #0x0004, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+0004=7999)
	mov     #0x3000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x7995, r4        ;#
	mov     #0x2007, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+2007=2)
	mov     #0x3001, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=1
	mov     #0x7995, r4        ;#
	mov     #0x2005, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+2005=0)
	mov     #0x3002, r15

	mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
	mov     #0x7995, r4        ;#
	mov     #0x0007, r5        ;#
	dadd         r4, r5        ;# Add decimally r5+r4 (7995+7=8002)
	mov     #0x3003, r15


        /* ------------------ TEST FLAGS IN BYTE MODE --------------------- */

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=0
	mov     #0x4675, r4        ;#
	mov     #0x3104, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+4=79)
	mov     #0x4000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x4775, r4        ;#
	mov     #0x3027, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+27=2)
	mov     #0x4001, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=1
	mov     #0x4775, r4        ;#
	mov     #0x3125, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+25=0)
	mov     #0x4002, r15

	mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
	mov     #0x4675, r4        ;#
	mov     #0x3207, r5        ;#
	dadd.b       r4, r5        ;# Add decimally r5+r4 (75+7=82)
	mov     #0x4003, r15


        /* ----------------------         END OF TEST        --------------- */
	mov      #0x5000, r15
end_of_test:
	nop
	br #0xffff


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
