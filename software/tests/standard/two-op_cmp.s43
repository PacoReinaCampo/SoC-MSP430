/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                 TWO-OPERAND ARITHMETIC: CMP[.B] INSTRUCTION               */
/*---------------------------------------------------------------------------*/
/* Test the CMP[.B] instruction.                                             */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev: 101 $                                                                */
/* $LastChangedBy: olivier.girard $                                          */
/* $LastChangedDate: 2011-03-04 21:17:50 +0100 (Fri, 04 Mar 2011) $          */
/*===========================================================================*/


.global main

main:
        /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */

	# Test CMP without Carry bit set
	mov     #0x0000, r2
	mov     #0x3333, r4
	mov     #0x8888, r5
	cmp          r4, r5        ;# Compare r5-r4 (0x8888-0x3333=0x5555)

	# Test CMP with Carry bit set
	mov     #0x0001, r2
	mov     #0x5555, r4
	mov     #0x9999, r6
	cmp          r4, r6        ;# Compare r6-r4 (0x9999-0x5555=0x4444)


	mov     #0x1000, r15


        /* -------------- TEST INSTRUCTION IN BYTE MODE ------------------- */

	# Test CMP.B without Carry bit set
	mov     #0x0000, r2
	mov     #0x3333, r4
	mov     #0x8888, r5
	cmp.b        r4, r5        ;# Compare r5-r4 (0x0088-0x0033=0x0055)

	# Test CMP.B with Carry bit set
	mov     #0x0001, r2
	mov     #0x5555, r4
	mov     #0x9999, r6
	cmp.b        r4, r6        ;# Compare r6-r4 (0x0099-0x0055=0x0044)


	mov     #0x2000, r15


        /* ------------------ TEST FLAGS IN WORD MODE ---------------------- */

	mov     #0x0000, r2        ;# V=0, N=1, Z=0, C=0
	mov     #0x0aaa, r4        ;#
	mov     #0x0666, r5        ;#
	cmp          r4, r5        ;# Compare r5-r4 (0x0666-0x0aaa=0xfbbc)
	mov     #0x3000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x0444, r4        ;#
	mov     #0x0555, r5        ;#
	cmp          r4, r5        ;# Compare r5-r4 (0x0555-0x0444=0x0111)
	mov     #0x3001, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=1
	mov     #0x0333, r4        ;#
	mov     #0x0333, r5        ;#
	cmp          r4, r5        ;# Compare r5-r4 (0x0333-0x0333=0x0000)
	mov     #0x3002, r15

	mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
	mov     #0x80ff, r4        ;#
	mov     #0x7ff0, r5        ;#
	cmp          r4, r5        ;# Compare r5-r4 (0x7ff0-0x80ff=0xfef1)
	mov     #0x3003, r15

	mov     #0x0000, r2        ;# V=1, N=0, Z=0, C=1
	mov     #0x7f00, r4        ;#
	mov     #0x8000, r5        ;#
	cmp          r4, r5        ;# Compare r5-r4 (0x8000-0x7f00=0x0100)
	mov     #0x3004, r15


        /* ------------------ TEST FLAGS IN BYTE MODE --------------------- */

	mov     #0x0000, r2        ;# V=0, N=1, Z=0, C=0
	mov     #0x890a, r4        ;#
	mov     #0x5106, r5        ;#
	cmp.b        r4, r5        ;# Compare r5-r4 (0x0006-0x000a=0x00fc)
	mov     #0x4000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0xfa04, r4        ;#
	mov     #0x5305, r5        ;#
	cmp.b        r4, r5        ;# Compare r5-r4 (0x0005-0x0004=0x0001)
	mov     #0x4001, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=1
	mov     #0xe603, r4        ;#
	mov     #0x8a03, r5        ;#
	cmp.b        r4, r5        ;# Compare r5-r4 (0x0003-0x0003=0x0000)
	mov     #0x4002, r15

	mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
	mov     #0x7387, r4        ;#
	mov     #0x817f, r5        ;#
	cmp.b        r4, r5        ;# Compare r5-r4 (0x007f-0x0087=0x00f8)
	mov     #0x4003, r15

	mov     #0x0000, r2        ;# V=1, N=0, Z=0, C=1
	mov     #0x8175, r4        ;#
	mov     #0x5480, r5        ;#
	cmp.b        r4, r5        ;# Compare r5-r4 (0x0080-0x0075=0x000b)
	mov     #0x4004, r15


	/* mmihai cmp.b  bug */

	mov     #0x0210, r5
	clr.b	0(r5)
	mov	#0x1, r4
	cmp.b   r4, 0(r5)
	jz	end_of_test	   ;# should not happen

	mov     #0x4100, r15
        

        /* ----------------------         END OF TEST        --------------- */
	mov      #0x5000, r15
end_of_test:
	nop
	br #0xffff


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
