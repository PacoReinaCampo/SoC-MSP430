/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                 TWO-OPERAND ARITHMETIC: AND[.B] INSTRUCTION               */
/*---------------------------------------------------------------------------*/
/* Test the AND[.B] instruction.                                             */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev: 19 $                                                                */
/* $LastChangedBy: olivier.girard $                                          */
/* $LastChangedDate: 2009-08-04 23:47:15 +0200 (Tue, 04 Aug 2009) $          */
/*===========================================================================*/


.global main

main:
        /* -------------- TEST INSTRUCTION IN WORD MODE ------------------- */

	mov     #0x0000, r2
	mov     #0x3333, r4
	mov     #0x9999, r5
	and          r4, r5        ;# AND r5 & r4 (0x9999 & 0x3333=0x1111)

	mov     #0x0001, r2
	mov     #0x5555, r4
	mov     #0xcccc, r6
	and          r4, r6        ;# AND r6 & r4 (0x5555 & 0xcccc=0x4444)

	mov     #0x1000, r15


        /* -------------- TEST INSTRUCTION IN BYTE MODE ------------------- */

	mov     #0x0000, r2
	mov     #0x3333, r4
	mov     #0x9999, r5
	and.b        r4, r5        ;# AND r5 & r4 (0x0099 & 0x0033=0x0011)

	mov     #0x0001, r2
	mov     #0x5555, r4
	mov     #0xcccc, r6
	and.b        r4, r6        ;# AND r6 & r4 (0x0055 & 0x00cc=0x0044)

	mov     #0x2000, r15


        /* ------------------ TEST FLAGS IN WORD MODE ---------------------- */

	mov     #0x0100, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x0333, r4        ;#
	mov     #0x0999, r5        ;#
	and          r4, r5        ;# AND r5 & r4 (0x0333 & 0x0999=0x0111)
	mov     #0x3000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=0
	mov     #0x0aaa, r4        ;#
	mov     #0x0555, r5        ;#
	and          r4, r5        ;# AND r5 & r4 (0x0aaa & 0x0555=0x0000)
	mov     #0x3001, r15

	mov     #0x0100, r2        ;# V=0, N=1, Z=0, C=1
	mov     #0x8333, r4        ;#
	mov     #0x8999, r5        ;#
	and          r4, r5        ;# AND r5 & r4 (0x8333 & 0x8999=0x8111)
	mov     #0x3002, r15


        /* ------------------ TEST FLAGS IN BYTE MODE --------------------- */

	mov     #0x0100, r2        ;# V=0, N=0, Z=0, C=1
	mov     #0x9903, r4        ;#
	mov     #0x3309, r5        ;#
	and.b        r4, r5        ;# AND r5 & r4 (0x0003 & 0x0009=0x0001)
	mov     #0x4000, r15

	mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=0
	mov     #0x990a, r4        ;#
	mov     #0x3305, r5        ;#
	and.b        r4, r5        ;# AND r5 & r4 (0x000a & 0x0005=0x0000)
	mov     #0x4001, r15

	mov     #0x0100, r2        ;# V=0, N=1, Z=0, C=1
	mov     #0x5583, r4        ;#
	mov     #0x5589, r5        ;#
	and.b        r4, r5        ;# AND r5 & r4 (0x0083 & 0x0089=0x0081)
	mov     #0x4002, r15


        /* ----------------------         END OF TEST        --------------- */
	mov      #0x5000, r15
end_of_test:
	nop
	br #0xffff


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
