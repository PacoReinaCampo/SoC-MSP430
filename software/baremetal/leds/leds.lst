
leds.elf:     file format elf32-msp430

SYMBOL TABLE:
0000c000 l    d  .text	00000000 .text
0000c1de l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000204 l    d  .noinit.crt0	00000000 .noinit.crt0
00000000 l    df *ABS*	00000000 main.c
0000c0d8 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 7seg.c
00000000 g       *ABS*	00000000 __data_size
0000c0d8  w      .text	00000000 __isr_14
0000c17a g       .text	00000000 __ext_divmod16
0000c0d8  w      .text	00000000 __isr_4
00000138 g       *ABS*	00000000 __OP2
0000c254 g     O .rodata	00000008 DispSegTbl
0000c1b4 g     F .text	00000000 __udivhi3
00000130 g       *ABS*	00000000 __MPY
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
0000c25c g       *ABS*	00000000 _etext
00000004 g       *ABS*	00000000 __bss_size
0000c000  w      .text	00000000 __watchdog_support
0000c1d8  w      .text	00000000 __stop_progExec__
0000c0d8  w      .text	00000000 __isr_11
0000c1f8 g     O .rodata	0000005b DispASCIItoSegTbl
0000c0d8  w      .text	00000000 __isr_5
0000c25c g       *ABS*	00000000 __data_load_start
0000c0d8 g       .text	00000000 __dtors_end
0000c0d8  w      .text	00000000 __isr_2
0000c1ac g     F .text	00000000 __modhi3
0000c112 g       .text	00000000 __isr_10
0000013c g       *ABS*	00000000 __RESHI
00000204 g     O .noinit.crt0	00000002 __wdt_clear_value
0000c0d8  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000c1ce g     F .text	00000000 __umodhi3
0000c0d8  w      .text	00000000 __isr_0
0000c028  w      .text	00000000 __do_clear_bss
0000c1d6  w      .text	00000000 _unexpected_
0000c0d8  w      .text	00000000 __isr_8
0000c0d8  w      .text	00000000 __isr_3
0000c17a g     F .text	00000000 __divhi3
0000c1b4 g       .text	00000000 __ext_udivmod16
0000c000  w      .text	00000000 _reset_vector__
0000c0d8 g       .text	00000000 __ctors_start
0000c0d8  w      .text	00000000 __isr_12
0000c010  w      .text	00000000 __do_copy_data
00000200 g       .bss	00000000 __bss_start
0000c03e g     F .text	0000009a main
0000c0d8  w      .text	00000000 __isr_13
00010000 g       .vectors	00000000 _vectors_end
0000c0dc g     F .text	00000036 delay
0000c0d8  w      .text	00000000 __isr_9
0000c00c  w      .text	00000000 __init_stack
00000200 g     O .bss	00000002 offset
0000c0d8 g       .text	00000000 __dtors_start
0000c0d8  w      .text	00000000 __isr_6
0000c0d8 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
00000a00 g       *ABS*	00000000 __stack
0000c0d8  w      .text	00000000 __isr_1
00000200 g       .rodata	00000000 _edata
00000204 g       .bss	00000000 _end
00000134 g       *ABS*	00000000 __MAC
0000c1d8  w      .text	00000000 _endless_loop__
0000c15c g     F .text	0000001e DispStr
0000c010  w      .text	00000000 __low_level_init
00000200 g       .rodata	00000000 __data_start
00000120 g       *ABS*	00000000 __WDTCTL
0000013e g       *ABS*	00000000 __SUMEXT
0000c112 g     F .text	0000004a INT_Watchdog
00000202 g     O .bss	00000002 irq_counter



Disassembly of section .text:

0000c000 <__watchdog_support>:
    c000:	55 42 20 01 	mov.b	&0x0120,r5	
    c004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    c008:	82 45 04 02 	mov	r5,	&0x0204	

0000c00c <__init_stack>:
    c00c:	31 40 00 0a 	mov	#2560,	r1	;#0x0a00

0000c010 <__do_copy_data>:
    c010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    c014:	0f 93       	tst	r15		
    c016:	08 24       	jz	$+18     	;abs 0xc028
    c018:	92 42 04 02 	mov	&0x0204,&0x0120	
    c01c:	20 01 
    c01e:	2f 83       	decd	r15		
    c020:	9f 4f 5c c2 	mov	-15780(r15),512(r15);0xc25c(r15), 0x0200(r15)
    c024:	00 02 
    c026:	f8 23       	jnz	$-14     	;abs 0xc018

0000c028 <__do_clear_bss>:
    c028:	3f 40 04 00 	mov	#4,	r15	;#0x0004
    c02c:	0f 93       	tst	r15		
    c02e:	07 24       	jz	$+16     	;abs 0xc03e
    c030:	92 42 04 02 	mov	&0x0204,&0x0120	
    c034:	20 01 
    c036:	1f 83       	dec	r15		
    c038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    c03c:	f9 23       	jnz	$-12     	;abs 0xc030

0000c03e <main>:
Main function with some blinking leds
*/
int main(void) {

    int o = 0;
    irq_counter = 0;
    c03e:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
    offset      = 0;
    c042:	82 43 00 02 	mov	#0,	&0x0200	;r3 As==00

    WDTCTL = WDTPW | WDTHOLD;          // Disable watchdog timer
    c046:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    c04a:	20 01 

    P1OUT  = 0x00;                     // Port data output
    c04c:	c2 43 21 00 	mov.b	#0,	&0x0021	;r3 As==00
    P2OUT  = 0x00;
    c050:	c2 43 29 00 	mov.b	#0,	&0x0029	;r3 As==00

    P1DIR  = 0x00;                     // Port direction register
    c054:	c2 43 22 00 	mov.b	#0,	&0x0022	;r3 As==00
    P2DIR  = 0xff;
    c058:	f2 43 2a 00 	mov.b	#-1,	&0x002a	;r3 As==11

    P1IES  = 0x00;                     // Port interrupt enable (0=dis 1=enabled)
    c05c:	c2 43 24 00 	mov.b	#0,	&0x0024	;r3 As==00
    P2IES  = 0x00;
    c060:	c2 43 2c 00 	mov.b	#0,	&0x002c	;r3 As==00
    P1IE   = 0x00;                     // Port interrupt Edge Select (0=pos 1=neg)
    c064:	c2 43 25 00 	mov.b	#0,	&0x0025	;r3 As==00
    P2IE   = 0x00;
    c068:	c2 43 2d 00 	mov.b	#0,	&0x002d	;r3 As==00
    //WDTCTL = WDTPW | WDTTMSEL | WDTCNTCL;// | WDTIS1  | WDTIS0 ;          // Configure watchdog interrupt

    //IE1 |= 0x01;
    //eint();                            //enable interrupts

    if (CPU_NR==0x0100) { 
    c06c:	1f 42 08 00 	mov	&0x0008,r15	
    c070:	3f 90 00 01 	cmp	#256,	r15	;#0x0100
    c074:	05 20       	jnz	$+12     	;abs 0xc080
      delay(0x000f, 0xffff);
    c076:	3e 43       	mov	#-1,	r14	;r3 As==11
    c078:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c07c:	b0 12 dc c0 	call	#0xc0dc	
    } 

    while (1) {                         // Main loop, never ends...

      P2OUT = 0x00;
    c080:	c2 43 29 00 	mov.b	#0,	&0x0029	;r3 As==00
      delay(0x000f, 0xffff);
    c084:	3e 43       	mov	#-1,	r14	;r3 As==11
    c086:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c08a:	b0 12 dc c0 	call	#0xc0dc	

      P2OUT = 0x01;
    c08e:	d2 43 29 00 	mov.b	#1,	&0x0029	;r3 As==01
      delay(0x000f, 0xffff);
    c092:	3e 43       	mov	#-1,	r14	;r3 As==11
    c094:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c098:	b0 12 dc c0 	call	#0xc0dc	

      P2OUT = 0x02;
    c09c:	e2 43 29 00 	mov.b	#2,	&0x0029	;r3 As==10
      delay(0x000f, 0xffff);
    c0a0:	3e 43       	mov	#-1,	r14	;r3 As==11
    c0a2:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c0a6:	b0 12 dc c0 	call	#0xc0dc	

      P2OUT = 0x03;
    c0aa:	f2 40 03 00 	mov.b	#3,	&0x0029	;#0x0003
    c0ae:	29 00 
      delay(0x000f, 0xffff);
    c0b0:	3e 43       	mov	#-1,	r14	;r3 As==11
    c0b2:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c0b6:	b0 12 dc c0 	call	#0xc0dc	

      P2OUT = 0x02;
    c0ba:	e2 43 29 00 	mov.b	#2,	&0x0029	;r3 As==10
      delay(0x000f, 0xffff);
    c0be:	3e 43       	mov	#-1,	r14	;r3 As==11
    c0c0:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c0c4:	b0 12 dc c0 	call	#0xc0dc	

      P2OUT = 0x01;
    c0c8:	d2 43 29 00 	mov.b	#1,	&0x0029	;r3 As==01
      delay(0x000f, 0xffff);
    c0cc:	3e 43       	mov	#-1,	r14	;r3 As==11
    c0ce:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c0d2:	b0 12 dc c0 	call	#0xc0dc	
    c0d6:	d4 3f       	jmp	$-86     	;abs 0xc080

0000c0d8 <__ctors_end>:
    c0d8:	30 40 d6 c1 	br	#0xc1d6	

0000c0dc <delay>:
#include "7seg.h"

/**
Delay function.
*/
void delay(unsigned int c, unsigned int d) {
    c0dc:	21 82       	sub	#4,	r1	;r2 As==10
  volatile int i, j;
  for (i = 0; i<c; i++) {
    c0de:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    c0e2:	1d 41 02 00 	mov	2(r1),	r13	;0x0002(r1)
    c0e6:	0d 9f       	cmp	r15,	r13	
    c0e8:	12 2c       	jc	$+38     	;abs 0xc10e
    for (j = 0; j<d; j++) {
    c0ea:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    c0ee:	2d 41       	mov	@r1,	r13	
    c0f0:	0d 9e       	cmp	r14,	r13	
    c0f2:	07 2c       	jc	$+16     	;abs 0xc102
      nop();
    c0f4:	03 43       	nop			
      nop();
    c0f6:	03 43       	nop			
Delay function.
*/
void delay(unsigned int c, unsigned int d) {
  volatile int i, j;
  for (i = 0; i<c; i++) {
    for (j = 0; j<d; j++) {
    c0f8:	91 53 00 00 	inc	0(r1)		;0x0000(r1)
    c0fc:	2d 41       	mov	@r1,	r13	
    c0fe:	0d 9e       	cmp	r14,	r13	
    c100:	f9 2b       	jnc	$-12     	;abs 0xc0f4
/**
Delay function.
*/
void delay(unsigned int c, unsigned int d) {
  volatile int i, j;
  for (i = 0; i<c; i++) {
    c102:	91 53 02 00 	inc	2(r1)		;0x0002(r1)
    c106:	1d 41 02 00 	mov	2(r1),	r13	;0x0002(r1)
    c10a:	0d 9f       	cmp	r15,	r13	
    c10c:	ee 2b       	jnc	$-34     	;abs 0xc0ea
    for (j = 0; j<d; j++) {
      nop();
      nop();
    }
  }
}
    c10e:	21 52       	add	#4,	r1	;r2 As==10
    c110:	30 41       	ret			

0000c112 <INT_Watchdog>:
it shoule be a clock ;-)
it does not count days, but i think you'll get the idea.
*/
volatile int irq_counter, offset;

wakeup interrupt (WDT_VECTOR) INT_Watchdog(void) {
    c112:	0f 12       	push	r15		
    c114:	0e 12       	push	r14		
    c116:	0d 12       	push	r13		
    c118:	0c 12       	push	r12		

  irq_counter++;
    c11a:	92 53 02 02 	inc	&0x0202	
  if (irq_counter == 300) {
    c11e:	1f 42 02 02 	mov	&0x0202,r15	
    c122:	3f 90 2c 01 	cmp	#300,	r15	;#0x012c
    c126:	0b 20       	jnz	$+24     	;abs 0xc13e
    irq_counter = 0;
    c128:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
    offset = (offset+1) % 20;
    c12c:	1f 42 00 02 	mov	&0x0200,r15	
    c130:	3e 40 14 00 	mov	#20,	r14	;#0x0014
    c134:	1f 53       	inc	r15		
    c136:	b0 12 ac c1 	call	#0xc1ac	
    c13a:	82 4f 00 02 	mov	r15,	&0x0200	
  }
  DispStr  (offset, "OPENMSP430 IN ACTION    ");
    c13e:	1f 42 00 02 	mov	&0x0200,r15	
    c142:	3e 40 de c1 	mov	#-15906,r14	;#0xc1de
    c146:	4f 4f       	mov.b	r15,	r15	
    c148:	b0 12 5c c1 	call	#0xc15c	
}
    c14c:	3c 41       	pop	r12		
    c14e:	3d 41       	pop	r13		
    c150:	3e 41       	pop	r14		
    c152:	3f 41       	pop	r15		
    c154:	b1 c0 f0 00 	bic	#240,	0(r1)	;#0x00f0, 0x0000(r1)
    c158:	00 00 
    c15a:	00 13       	reti			

0000c15c <DispStr>:
* ASCII to seven-segment conversion table DispASCIItoSegTbl[].
*********************************************************************************************************
*/

void DispStr (INT8U offset, INT8U *s)
{
    c15c:	3c 40 54 c2 	mov	#-15788,r12	;#0xc254
* Notes : - Not all ASCII characters can be displayed on a seven-segment display. Consult the
* ASCII to seven-segment conversion table DispASCIItoSegTbl[].
*********************************************************************************************************
*/

void DispStr (INT8U offset, INT8U *s)
    c160:	4f 4f       	mov.b	r15,	r15	
    c162:	0f 5e       	add	r14,	r15	
{
  int dig        = 0;
  register INT8U* p;
  register INT8U c;
  while (dig < DIGIT_NR) {
    p = DispSegTbl[dig];
    c164:	3e 4c       	mov	@r12+,	r14	
    c = *(offset+s);
    *p = DispASCIItoSegTbl[c - 0x20];
    c166:	7d 4f       	mov.b	@r15+,	r13	
    c168:	3d 50 f8 c1 	add	#-15880,r13	;#0xc1f8
    c16c:	de 4d e0 ff 	mov.b	-32(r13),0(r14)	;0xffe0(r13), 0x0000(r14)
    c170:	00 00 
void DispStr (INT8U offset, INT8U *s)
{
  int dig        = 0;
  register INT8U* p;
  register INT8U c;
  while (dig < DIGIT_NR) {
    c172:	3c 90 5c c2 	cmp	#-15780,r12	;#0xc25c
    c176:	f6 23       	jnz	$-18     	;abs 0xc164
    c = *(offset+s);
    *p = DispASCIItoSegTbl[c - 0x20];
    dig++;
    s++;
  }
}
    c178:	30 41       	ret			

0000c17a <__divhi3>:
    c17a:	0d 43       	clr	r13		
    c17c:	0f 93       	tst	r15		
    c17e:	04 34       	jge	$+10     	;abs 0xc188
    c180:	3d 40 03 00 	mov	#3,	r13	;#0x0003
    c184:	3f e3       	inv	r15		
    c186:	1f 53       	inc	r15		
    c188:	0e 93       	tst	r14		
    c18a:	03 34       	jge	$+8      	;abs 0xc192
    c18c:	5d e3       	xor.b	#1,	r13	;r3 As==01
    c18e:	3e e3       	inv	r14		
    c190:	1e 53       	inc	r14		
    c192:	0d 12       	push	r13		
    c194:	b0 12 b4 c1 	call	#0xc1b4	
    c198:	3d 41       	pop	r13		
    c19a:	6d b3       	bit.b	#2,	r13	;r3 As==10
    c19c:	02 24       	jz	$+6      	;abs 0xc1a2
    c19e:	3e e3       	inv	r14		
    c1a0:	1e 53       	inc	r14		
    c1a2:	5d b3       	bit.b	#1,	r13	;r3 As==01
    c1a4:	02 24       	jz	$+6      	;abs 0xc1aa
    c1a6:	3f e3       	inv	r15		
    c1a8:	1f 53       	inc	r15		
    c1aa:	30 41       	ret			

0000c1ac <__modhi3>:
    c1ac:	b0 12 7a c1 	call	#0xc17a	
    c1b0:	0f 4e       	mov	r14,	r15	
    c1b2:	30 41       	ret			

0000c1b4 <__udivhi3>:
    c1b4:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    c1b8:	0d 4e       	mov	r14,	r13	
    c1ba:	0e 43       	clr	r14		
    c1bc:	0f 5f       	rla	r15		
    c1be:	0e 6e       	rlc	r14		
    c1c0:	0e 9d       	cmp	r13,	r14	
    c1c2:	02 28       	jnc	$+6      	;abs 0xc1c8
    c1c4:	0e 8d       	sub	r13,	r14	
    c1c6:	1f d3       	bis	#1,	r15	;r3 As==01
    c1c8:	1c 83       	dec	r12		
    c1ca:	f8 23       	jnz	$-14     	;abs 0xc1bc
    c1cc:	30 41       	ret			

0000c1ce <__umodhi3>:
    c1ce:	b0 12 b4 c1 	call	#0xc1b4	
    c1d2:	0f 4e       	mov	r14,	r15	
    c1d4:	30 41       	ret			

0000c1d6 <_unexpected_>:
    c1d6:	00 13       	reti			

0000c1d8 <__stop_progExec__>:
    c1d8:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    c1dc:	fd 3f       	jmp	$-4      	;abs 0xc1d8

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	d8 c0 d8 c0 d8 c0 d8 c0 d8 c0 d8 c0 d8 c0 d8 c0     ................
    fff0:	d8 c0 d8 c0 12 c1 d8 c0 d8 c0 d8 c0 d8 c0 00 c0     ................
